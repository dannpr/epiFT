[{"/Users/macdann/github/epiFT/mintpage/buildspace-nft-course-starter/src/index.js":"1","/Users/macdann/github/epiFT/mintpage/buildspace-nft-course-starter/src/App.js":"2"},{"size":226,"mtime":1644435563450,"results":"3","hashOfConfig":"4"},{"size":4922,"mtime":1644651883659,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"1o5qxnn",{"filePath":"9","messages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/macdann/github/epiFT/mintpage/buildspace-nft-course-starter/src/index.js",[],["12","13"],"/Users/macdann/github/epiFT/mintpage/buildspace-nft-course-starter/src/App.js",["14"],"import React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport { ethers } from \"ethers\";\nimport MyAnimeNFT from './utils/MyAnimeNFT.json'\n\n\nconst TWITTER_HANDLE = 'dannyba10';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst CONTRACT_ADDRESS = \"0x4387AfA95e794e36AC446e8DdF3ef54E01D141e4\";\n\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account)\n      setupEventListener()\n\n    } else {\n      console.log(\"No authorized account found\")\n    }\n  }\n\n  /*\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n      * Fancy method to request access to account.\n      */\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      /*\n      * Boom! This should print out public address once we authorize Metamask.\n      */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      setupEventListener()\n\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, MyAnimeNFT.abi, signer);\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewAnimeNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\")\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  const askContractToMintNft = async () => {\n\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, MyAnimeNFT.abi, signer);\n\n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.mintAnimeNFT();\n\n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  /*\n  * Added a conditional render! We don't want to show Connect to Wallet if we're already connected :).\n  */\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n          ) : (\n            <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n              Mint NFT\n            </button>\n          )}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with love by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;",{"ruleId":"15","replacedBy":"16"},{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","severity":1,"message":"20","line":131,"column":6,"nodeType":"21","endLine":131,"endColumn":8,"suggestions":"22"},"no-native-reassign",["23"],"no-negated-in-lhs",["24"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkIfWalletIsConnected'. Either include it or remove the dependency array.","ArrayExpression",["25"],"no-global-assign","no-unsafe-negation",{"desc":"26","fix":"27"},"Update the dependencies array to be: [checkIfWalletIsConnected]",{"range":"28","text":"29"},[3856,3858],"[checkIfWalletIsConnected]"]